import openai
import lmql
import asyncio
import nest_asyncio
import re

nest_asyncio.apply()

# The following LMQL query asks the model to output a list of things to bring to a given event.
# Users can input an event of choice using string interpolation
# The program outputs a packing list based on that event of choice.

# Example input: 
# School
# Example output:
# ['Backpack', 'Pencil', 'Notebook', 'Lunch', 'Water bottle']

@lmql.query  # Marks this function as an LMQL query definition.
def scripted_prompting(event):  # Defines a function that accepts an "event" parameter.
    '''lmql # Indicates that the following block is written in LMQL
    "Q: Output a list of things to bring to {event}. Each 'thing' should be only one word. \n" 
    # Internal prompt statement, dynamically inserting the event name into the question w/ string interpolation.
    list = []  # Initializes an empty Python list to store the generated items.
    for i in range(5): # Loops 5 times to collect 5 items.
        "[THING]" where STOPS_AT(THING, "\n")  
        # Queries the model for a single word (THING) and ensures it stops at a newline character.
        list.append(THING.strip())  
        # Strips whitespace from the generated THING and appends it to the list.
    return list  # Returns the list of items generated by the model.
    '''
print(scripted_prompting("school")) 
# Call the scripted_prompting query with "school" as the event and print the result.

# The following LMQL query takes a given question as an input and outputs both the answer and the reasoning behind it. 
# The model arrives at this answer using a step-by-step reasoning process as instructed in the internal prompt statement.
 
# Example input: 
# How many tennis balls fit in the Empire State Building?
# Example outout: 
# First, we need to determine the volume of the Empire State Building. 
# According to the building's official website, the volume is approximately 37 million cubic feet. 
# Next, we need to determine the volume of a standard tennis ball. 
# According to the International Tennis Federation, the volume of a tennis ball is approximately 2.5 cubic inches. 
# Finally, we can calculate the number of tennis balls that can fit in the Empire State Building.
# We do this by dividing the volume of the building by the volume of a tennis ball. 
# This gives us an estimated answer of 5.9 billion tennis balls.

@lmql.query  # Marks this function as an LMQL query definition.
def chain_of_thought(question):  # Defines a function that takes a "question" as input.
    '''lmql  # Indicates that the following block is written in LMQL.
    "Q: {question}\n"  
    # Formats the question dynamically with string interpolation.
    "A: Let's find the answer by thinking step by step.\n\n"  
    # Internal prompt statement instructing the model to reason step by step to find the answer.
    "[REASONED_ANSWER]" # A placeholder for the model's response to capture the output.
    return REASONED_ANSWER  # Returns the model's generated response as the output of the function.
    '''
print(chain_of_thought("How many tennis balls fit in the Empire State Building?")) 
# Call the chain_of_thought query with a given question and print the result.


# The following LMQL query is very similar to the previous program.
# However, the internal prompt statement now asks explicitly for the model's reasoning 
# and does not encourage chain-of-thought reasoning. 
# Moreover, this program outputs the answer and reasoning separately instead of wrapping them into one output.
# This change in prompting shows how the intial answer can differ without embedded reasoning.  

# Example input: 
# How many tennis balls fit in the Empire State Building?
# Example output: 
# ANSWER: It is impossible to accurately determine the number of tennis balls that would fit in the Empire State Building
# without knowing the exact dimensions of the building and the size of the tennis balls. 
# However, it is safe to say that it would be a very large number.
# REASONING: The Empire State Building has a volume of 37 million cubic feet and 
# a standard tennis ball has a volume of 9.4 cubic inches. 
# Dividing the building's volume by the volume of a single tennis ball gives us approximately 110 million tennis balls. 
# However, this calculation does not account for the building's structures and objects inside, 
# so the actual number would likely be significantly less.

@lmql.query  # Marks the function as an LMQL query definition.
def structured_framework(question):  # Defines a function that takes a "question" as input.
    '''lmql  # Indicates that the following block is written in LMQL
    "Q: {question}\n"  
    # Formats the question dynamically with string interpolation.
    "A: [ANSWER]"  
    # Instructs the model to generate an answer, stored as the variable [ANSWER].
    "Here is my reasoning for this answer: \n\n"  
    # Adds a static internal prompt instructing the model to provide reasoning for the answer.
    "[REASONING]"  
    # A placeholder for the model's reasoning output, stored as the variable [REASONING].
    return ANSWER, REASONING  
    # Returns both the generated answer and the reasoning
    '''
print(structured_framework("How many tennis balls fit in the Empire State Building?"))  
# Call the structured_framework query with a given question and print the result

# The following LMQL query is also similar to the above examples. 
# This program's internal prompt statement encourages reasoning by asking the model to explain why it arrived at its answer. 

# Example Input:
# How many tennis balls fit in the Empire State Building?
# Example output: 
# ANSWER: It is impossible to accurately determine the number of tennis balls that would fit in the Empire State Building 
# without knowing the exact dimensions of the building and the size of the tennis balls. 
# However, it is safe to say that it would be a very large number.
# EXPLANATION: The Empire State Building is a very large structure with varying dimensions, 
# making it difficult to estimate the number of tennis balls that would fit inside. 
# Additionally, the size of the tennis balls would also greatly impact the final number.

@lmql.query # Marks the function as an LMQL query definition.
def recursive_questioning(question):  # Defines a function that accepts a "question" as input.
    '''lmql  # Indicates that the following block is written in LMQL.
    "Q: {question}\n"  
    # Formats the question dynamically with string interpolation.
    "A: [ANSWER]"  
    # Asks the model to provide an answer, which is stored in the [ANSWER] variable.
    "Why is that your answer? Explain to me in less than three sentences\n\n"  
    # Prompts the model to justify its answer
    "[EXPLANATION]"  
    # Placeholder to capture the model's explanation, stored in the [EXPLANATION] variable.
    return ANSWER, EXPLANATION  
    # Returns the generated answer and explanation
    '''
print(recursive_questioning("How many tennis balls fit in the Empire State Building?"))  
# Call the recursive_questioning query with the given question and print the result
