import openai  # Imports the OpenAI library for interacting with OpenAI's APIs
import lmql  # Imports the LMQL library for querying language models with logical constraints
import asyncio  # Imports the asyncio library for writing asynchronous code
import nest_asyncio  # Imports the nest_asyncio library to allow nested use of the asyncio event loop

nest_asyncio.apply()  
# Applies the nest_asyncio patch to allow the current event loop to run nested event loops

storage = {}  # Initializes an empty dictionary to store key-value pairs

def assign(key, value):  
    # Defines a function to assign a value to a key in the storage dictionary
    storage[key] = value  # Adds or updates the key-value pair in the dictionary
    return f'{{{key}: "{value}"}}'  
    # Returns a formatted string representation of the key-value pair

def get(key): 
    # Defines a function to retrieve a value from the storage dictionary by its key
    return storage.get(key)  
    # Uses the `get` method to return the value for the key, or None if the key doesn't exist


# The following program leverages the assign() and get() functions, which exist
# in the surrounding Python interpreter, to guide the model to both generate and store 
# key-value pairs of information about a hypothetical person (e.g., name, age, occupation, etc). 
# The model output is a list of the keys and values that the model has generated and stored, 
# as well a given key-value pair, which is decided based on user input of a given key.

# Example output: 
# KEYSANDVALUES:
# KEYS: name, age, occupation, company, salary, education, years_of_experience, skills
# VALUES: Sarah Smith, 25, Marketing Manager, XYZ Corporation, $60,000, 
# Bachelor's degree in Marketing, 3, Social media marketing, market research, project management
# KEYVAL: Age: 25

@lmql.query # Marks this function as an LMQL query definition
def keyvalcomplex(key): # Defines a function that accepts an "event" parameter
    '''lmql # Indicates that the following block is written in LMQL
    "Let's store information about a young professional using the assign and get functions.\
    First, make up information to store information in the assign function. \n\n"
    # Prompt the model to store information about a young professional using the assign and get functions
    # that exist in the surrounding Python interpreter
    "[INFO]"  
    # Placeholder where the model generates and stores the hypothetical person's information
    "Return all of the stored keys and values. Return output in this form: KEYS: key1, key2, key3, VALUES: value1, value2, value3.\
    Only return these words, do not return any information that explains how to get to these words \
    (e.g., do not output any functions)\n\n"
     # Instruction to return all keys and values from the stored information, with specific formatting directions
    "[KEYSANDVALUES]"  
    # Placeholder where the model outputs the keys and values as per the specified format
    "Return just the {key} of the person in the format of {key}: Value. \
    Only return these words, do not return any information that explains how to get to these words \
    (e.g., do not output any functions)\n\n"
    # Instruction to extract and return just the value of the requested key, with specific formatting directions
    "[KEYVAL]" 
    # Placeholder where the model outputs the requested key-value pair
    return KEYSANDVALUES, KEYVAL
    # The function outputs both the full list of keys and values and the specific key-value pair
    '''
print(keyvalcomplex("Age"))
# Calls the keyvalcomplex query with "age" as the chosen key and prints the result 
