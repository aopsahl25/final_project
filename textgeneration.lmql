import openai
import lmql
import asyncio
import nest_asyncio

nest_asyncio.apply()

# The following LMQL query asks the model to output a joke and a punchline. 
# The program uses constraints to limit the length of both the joke and the punchline,
# Ensuring that the joke is not too long and that the punchline is not too short. 
# The program output is the joke and punchline with the mentioned contraints applied.

# Example Output: 
# "Why couldn't the bicycle stand up by itself?", "Because it was two-tired.""

@lmql.query # Marks this function as an LMQL query definition
def constrained_length(): # Defines a function within the LMQL query
    '''lmql # Indicates that the following block is written in LMQL syntax
    "Tell me just a joke, do not tell me the punchline:\n\n"
    # Prompt the model to tell a joke, but without revealing the punchline
    "[JOKE]\n" where len(TOKENS(JOKE)) < 10  
    # Create a placeholder for joke text and enforce a length constraint
    "Now tell me the punchline.\n" # Ask for the punchline of the joke
    "A:[PUNCHLINE]\n" where len(TOKENS(PUNCHLINE)) > 1  
    # Create a placeholder for punchline text and enforce a length constraint
    return JOKE, PUNCHLINE #return the joke and its punchline
    '''
print(constrained_length())
# Call the constrained_length query and print its output

# The following LMQL query asks the model to output a packing list for a trip. 
# The program uses constraints to ensure that items on that list come from a set of variables.
# The program output is a list including the variables from which the model could choose.

# Example output: 
# ['Sunscreen', 'Bathing Suit', 'Towel', 'Towel']

@lmql.query # Marks this function as an LMQL query definition
def choice_from_set(): # Defines a function within the LMQL query
    '''lmql # Indicates that the following block is written in LMQL syntax
    "My packing list for the trip:"  # Prompt the model to generate a packing list
    list = []  # Initialize an empty list to store selected items
    for i in range(4):  # Iterate 4 times to select 4 items
        "-[THING]" where THING in set(["Volleyball", "Sunscreen", "Bathing Suit", "Book", "Towel"])  
        # Select an item from the given set
        list.append(THING.strip()) 
        # Add the selected item (stripped of extra whitespace) to the list
    return list  # Return the final list of selected items
    '''
print(choice_from_set())
# Call the choice_from_set query and print its output

# The following LMQL query asks the model to output a story, 
# with specific directions on story length and phrases to include.
# The program employs constraints to ensure the story ends before the phrase 'The end.'
# The program output is the story with this constraint applied. 

# Example output: 
# Once upon a time, in a faraway kingdom, there lived a brave knight named Sir William. 
# He embarked on a quest to defeat a fire-breathing dragon and save the kingdom from destruction. 
# After a fierce battle, Sir William emerged victorious and the kingdom was saved.

@lmql.query # Marks this function as an LMQL query definition
def stops_before(): # Defines a function within the LMQL query
    '''lmql # Indicates that the following block is written in LMQL syntax
    "Tell me a story. It should be 3 sentences and include the phrases 'Once upon a time' and 'The end'\n\n"
    # Prompt the model to tell a story with specific requirements
    "[STORY]" where STOPS_BEFORE(STORY, " The end.")  
    # Placeholder for the story text. The story generation will stop before 'The end.'
    return STORY # Return the generated story text with contraints applied
    '''
print(stops_before())
# Call the stops_before query and print its output

# The following LMQL query is very similar to the previous one.
# However, instead of adding a constraint for the story to stop before "The end.",
# the program stops the story at "The end," including the phrase in the output but generating no further text.

# Example Output:
# Once upon a time, in a faraway kingdom, there lived a brave knight named Sir William. 
# He embarked on a quest to defeat a fire-breathing dragon and save the kingdom from destruction. 
# After a fierce battle, Sir William emerged victorious and the kingdom was saved. The end.


@lmql.query # Marks this function as an LMQL query definition
def stops_at(): # Defines a function within the LMQL query
    '''lmql # Indicates that the following block is written in LMQL syntax
    "Tell me a story. It should be 3 setences and include the phrases 'Once upon a time' and 'The end'\n\n"
    # Prompt the model to tell a story with specific requirements
    "[STORY]" where STOPS_AT(STORY, " The end.")
    # Placeholder for the story text. The story generation will stop at 'The end.'
    return STORY # Return the generated story text with contraints applied
    '''
print(stops_at())
# Call the stops_at query and print its output

# The following LMQL query instructs the model to output a number between 1 and 100.
# The program then implements a number type constraint to ensure that number is an integer.
# The output of the program is a number, as well as the type of the object (integer).


@lmql.query() # Marks this function as an LMQL query definition
def num_constraints():  # Defines a function within the LMQL query
    '''lmql  # Indicates that the following block is written in LMQL syntax
    "Q: Give me a number between 1 and 100:\n\n"  
    # Prompt asking the model to provide a number within the specified range
    "[N]" where INT(N)  
    # Placeholder for the number, with a constraint that the number must be an integer
    return N, type(N)  # Returns the generated number and its type (to verify it's an integer)
    '''
print(num_constraints())  
# Call the num_constraints query and print its output

# The following LMQL query instructs the model to print the date of a given day in the year.
# The program uses REGEX constraints to format these dates to be in DD/MM format.
# The program output are two dates for important days of the year (Christmas, New Year's Day)

@lmql.query()  # Marks this function as an LMQL query definition, enabling interaction with an LMQL model
def regex_constraints():  # Defines the function that contains the LMQL query
    '''lmql  # Indicates that the following block is written in LMQL syntax
    "Today is Christmas. What is the date?\n\n"  
    # Prompt asking the model to provide the date for Christmas
    "[DATE1]" where REGEX(DATE1, r"[0-9]{2}/[0-9]{2}")  
    # Placeholder for the date, constrained to match the format "MM/DD"
    "What will the date be on new year's day?\n\n" 
      # Prompt asking the model to provide the date for New Year's Day
    "[DATE2]" where REGEX(DATE2, r"[0-9]{2}/[0-9]{2}")  
    # Placeholder for the date, also constrained to the "MM/DD" format
    return DATE1, DATE2  # Returns the two dates (for Christmas and New Year's Day) as output
    '''
print(regex_constraints())  
# Call the regex_constraints query and print its output
