import httpx
import nest_asyncio
import asyncio
import lmql

nest_asyncio.apply()

async def fetch_data(url):
    async with httpx.AsyncClient() as client:
        response = await client.get(url)
        return response.json()

async def wikipedia(q):
    try:
        # Clean up the query string
        q = q.strip("\n '.")
        # Wikipedia API URL
        url = f"https://en.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&titles={q}&origin=*"
        response = await fetch_data(url)
        pages = response.get("query", {}).get("pages", {})
        if pages:
            return list(pages.values())[0].get("extract", "No extract available")[:280]
        else:
            return "No results"
    except Exception as e:
        return f"An error occurred: {str(e)}"

@lmql.query
async def main():
    '''lmql
    "Use wikipedia to search about the following topic:"
    topic = "Python (programming language)"
    result = await wikipedia(topic)
    "take {result} and make it only two sentences\n\n"
    "[SHORTRESULT]"
    print(SHORTRESULT)
    '''

await main()
